# -*- coding: utf-8 -*-
"""
Created on Wed Jun 13 16:49:33 2018

@author: zhenlinz
"""

from matplotlib import cm
from matplotlib.colors import LinearSegmentedColormap 
from matplotlib.colors import ListedColormap
import numpy as np
from matplotlib import colors


def ModifyColorbar(cm1,gradientList,cmap_name='NewColor'):
    """ Create original colormap by cm1 = cm.jet
        gradientList is a list of integers from 0 to 255
    """
    gradientList = np.asarray( [int(g) for g in gradientList] )
    
    if (max(gradientList)>255) | (min(gradientList)<0) | \
       (len(gradientList)>256):
        raise('gradientList must be a list of integers between 0 to 255')
    else:
        colorList1 = np.asarray( [cm1(i) for i in range(256)] ) # the sysstem colorbar contains 256 colors
        colorList2 = colorList1[gradientList]
        cm2 = LinearSegmentedColormap.from_list(
        cmap_name, colorList2, N=256*2)
        return cm2
        
        
def MagnifyLocal(cm1,mag,cmin,cmax):
    """ magnify colorbar for the local region
    cm1: colorbar generated by cm1 = cm.jet 
    mag = a list of [(s1,s2,m)] where s1 is the start value, s2 is the end value and m is the magnifying int
    cmin: minimum value for the colorbar
    cmax: maximum value for the colorbar
    """
    colorList1 = np.asarray( [cm1(i) for i in range(256)] ) # the sysstem colorbar contains 256 colors
    cm1l = [cm1(i) for i in range(256)]
    
    # First we calculate how many new bins the magnification introduced
    N1 = 0
    N2 = 0
    for c in mag:
        s1 = int( (c[0]-cmin)/(cmax-cmin)*256 )
        s2 = int( (c[1]-cmin)/(cmax-cmin)*256 )
        N1 = N1 + int( (s2-s1) )
        N2 = N2 + int ( (s2-s1)*c[2] )

    # resize the remaining color list to accomodate the changes in the number of bins
    br = (256-N2)/(256-N1)   # bin ratio

    ind = 0
    cmlist = []
    for c in mag:
        s1 = int( (c[0]-cmin)/(cmax-cmin)*256 )
        s2 = int( (c[1]-cmin)/(cmax-cmin)*256 )
        N = int ( (s2-s1)*c[2] )
        cmc = LinearSegmentedColormap.from_list(
                'NewColor',colorList1[[s1,s2]],N=N)
        N1 = int ( (s1-ind)*br )
        if N1>2:            
            cm1lc = LinearSegmentedColormap.from_list(
                    'NewColor',cm1l[ind:s1],N=N1) #resize the bin of colorbars
            cmlist = cmlist + [cm1lc(i) for i in range(N1)]
        cmlist = cmlist + [cmc(i) for i in range(N)]
        ind = s2
    cmlist = cmlist + cm1l[ind:]
    cm2 = ListedColormap(cmlist)
    return cm2  

def CreateColorbar(colorList,nc,cmap_name='NewColor'):
    """
    ColorList: a list of colors in the form [(0,0,1,1),(0,0.5,1,1),(0,1,1,1)...] 
    or ['blue','red','yellow']
    nc:number of color intervals between the list of colors in the form [nc1,nc2...]
    len(nc)-1=len(ColorList)
    """
    
    
    if len(colorList)<=1:
        raise('ColorList must have at least two colors')
    else:
        if sum(nc)<256:
            Ri = np.round(256/sum(nc))
            nc = [nci*Ri for nci in nc]
        List = []
        for i,n in enumerate(nc):
            c1 = np.asarray(colors.to_rgb(colorList[i]))
            c2 = np.asarray(colors.to_rgb(colorList[i+1]))
            cdiff = (c2-c1)/n
            clist = [tuple(np.around(c1+cdiff*ni,2)) for ni in np.arange(n+1)]
            List+=clist
        cm2 = LinearSegmentedColormap.from_list(
        cmap_name, List, N=len(List))
        return cm2
            
        
def CreateCustomColorbar(norm,ax,orientation='horizontal',label=None, **kwargs):
    # I still need to split the ax into 2... Otherwise the colorbar will overide 
    # the plot. 
    #cmap = mpl.cm.cool
    vmin = norm.vmin
    vmax = norm.vmax
    norm = mpl.colors.Normalize(vmin=vmin, vmax=vmax)
    cb1 = mpl.colorbar.ColorbarBase(ax=ax, 
                                    norm=norm,
                                    orientation=orientation,
                                    **kwargs)
    cb1.set_label(label)
    return cb1    
    
if __name__ == '__main__':     
#    #Example of using  ModifyColorbar   
#    cm1 = cm.jet
#    gradientList = list(np.linspace(0,100,100-1)) + list(np.linspace(100,255,10))
#    cmap_name = 'mod_jet'
#    cm2 = ModifyColorbar(cm1,gradientList,cmap_name)
#    plt.register_cmap(cmap=cm2) #need to register the map so it can be recognized
    # Example of generating a jet colorbar    
    cm3 = CreateColorbar(['blue','cyan','yellow','orange','red'],[10,10,10,10])
    
    

